{"name":"Data Repository","tagline":"An pretty simple, and easy form to use ADO .NET C#","body":"===========================\r\nC# DataRepository to MySQL!\r\n===========================\r\n\r\nAn pretty simple, and easy form to use ADO .NET C#\r\nNo Dll's, Lib's, or anything else!\r\nJust download the class files, put in your App_Code directory and enjoy!\r\n\r\n**How to use!**\r\n\r\n  - First Of All!\r\n    - **1.1** Installing\r\n\r\n  - Type of Methods!\r\n    - **2.1** Modifiers\r\n    - **2.2** Retrieves\r\n      - **2.2.1** Extension Method (Verify)\r\n    \r\n  - Accompaniments!\r\n    - **3.1** BusinessRepository&lt;T&gt;\r\n\r\n-------------\r\nFirst Of All!\r\n-------------\r\n**1.1 - Installing**\r\n\r\n*You just have to download the archive class: data_repository.cs, and if you want the business_repository.cs to more explanation scroll down at the 3.1 section!*\r\n\r\n\r\n----------------\r\nType of Methods!\r\n----------------\r\n**2.1 - Modifiers**\r\n\r\n*Methods that will be modify rows, (INSERT, UPDATE, DELETE)*\r\n \r\n Eg.:\r\n```\r\npublic bool Add()\r\n{\r\n  try\r\n  {\r\n    string sql = @\"INSERT INTO tags (total_posts, name, uri) \r\n                   VALUES (@total_posts, @name, @uri);\";\r\n    return DataRepository.ChangeRecords(GetParameters(), sql);\r\n  }\r\n  catch (Exception ex)\r\n  {\r\n    throw new Exception(ex.Message);\r\n  }\r\n}\r\n```\r\n\r\n\r\nInstead of use this very old and ugly form:\r\n\r\n\r\n```\r\npublic bool Add()\r\n{\r\n  bool isOk = false;\r\n  try\r\n  {\r\n    using (MySqlConnection conn = dbConnect.SiteConnection())\r\n    {\r\n      string sql = @\"INSERT INTO tags (total_posts, name, uri) \r\n                     VALUES (@total_posts, @name, @uri);\";\r\n      using(MySqlCommand cmd = new MySqlCommand(sql, conn))\r\n      {\r\n        cmd.Parameters.Add(\"@name\", MySqlDbType.VarChar).Value = Name;\r\n        cmd.Parameters.Add(\"@uri\", MySqlDbType.VarChar).Value = Uri;\r\n        cmd.Parameters.Add(\"@total_posts\", MySqlDbType.Int32).Value = TotalPosts;\r\n        conn.Open();\r\n        isOk = cmd.ExecuteNonQuery() > 0 ? true : false;\r\n      }\r\n    }\r\n  }\r\n  catch (Exception ex)\r\n  {\r\n    throw ex;\r\n  }\r\n  return isOk;\r\n}\r\n```\r\n\r\nAnd its the same of UPDATE and DELETE methods, just changing the parameters and query of course!\r\n\r\n\r\n**2.2 Retrieves**\r\n\r\nTo SELECT query statements you need one more method in your type class.\r\nThere is no pattern about the name. Here I just call him, FillAttributes;\r\nHe'll be used like as a Func&lt;DataRow&gt;.\r\n\r\n\r\nSee:\r\n```\r\nprotected override Tag FillAttributes(DataRow dr)\r\n{\r\n  return new Tag\r\n  {\r\n    ID = dr.Verify(\"id\", Convert.ToInt32),\r\n    Name = dr.Verify(\"name\", Convert.ToString),\r\n    Uri = dr.Verify(\"uri\", Convert.ToString),\r\n    TotalPosts = dr.Verify(\"total_posts\", Convert.ToString) \r\n  };\r\n}\r\n```\r\n\r\nAnd you'll need him on these code (kept at tag.cs!)\r\n\r\n```\r\npublic List<Tag> List(int now, int end)\r\n{\r\n  try\r\n  {\r\n    string strSQL = @\"SELECT * FROM tbl_catalogs ORDER BY id DESC LIMIT @now, @end;\";\r\n    return DataRepository.List(new Dictionary<string, object>() { {\"now\", now}, {\"end\", end} },\r\n                               strSQL, FillAttributes);\r\n  }\r\n  catch (Exception e)\r\n  {\r\n    throw new Exception(e.Message);\r\n}\r\n```\r\n\r\n**2.2.1 Extension Method**\r\n\r\nThe method exemplicated before this explanation, verify all of collumns that comes into the DataRow object. In this form, you need define only once the method `FillAtributes`.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}